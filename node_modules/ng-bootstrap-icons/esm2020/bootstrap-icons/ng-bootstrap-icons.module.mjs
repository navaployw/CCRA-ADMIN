import { NgModule, Optional } from "@angular/core";
import { BootstrapIcons } from "./ng-bootstrap-icons.component";
import { Icons } from "./icons.provider";
import * as i0 from "@angular/core";
import * as i1 from "./icons.provider";
export class BootstrapIconsModule {
    constructor(icons) {
        this.icons = icons;
        if (!this.icons) {
            throw new Error(`No icon provided. Make sure to use 'BootstrapIconsModule.pick({ ... })' when importing the module\n` +
                `Refer to documentation on https://github.com/biutas/ng-bootstrap-icons/issues`);
        }
    }
    static pick(icons) {
        return {
            ngModule: BootstrapIconsModule,
            providers: [{ provide: Icons, multi: true, useValue: icons }],
        };
    }
}
BootstrapIconsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: BootstrapIconsModule, deps: [{ token: i1.Icons, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
BootstrapIconsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: BootstrapIconsModule, declarations: [BootstrapIcons], exports: [BootstrapIcons] });
BootstrapIconsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: BootstrapIconsModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: BootstrapIconsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [BootstrapIcons],
                    exports: [BootstrapIcons],
                }]
        }], ctorParameters: function () { return [{ type: i1.Icons, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYm9vdHN0cmFwLWljb25zLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvYm9vdHN0cmFwLWljb25zL25nLWJvb3RzdHJhcC1pY29ucy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztBQU16QyxNQUFNLE9BQU8sb0JBQW9CO0lBQy9CLFlBQWdDLEtBQVk7UUFBWixVQUFLLEdBQUwsS0FBSyxDQUFPO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FDYixxR0FBcUc7Z0JBQ25HLCtFQUErRSxDQUNsRixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUVYO1FBQ0MsT0FBTztZQUNMLFFBQVEsRUFBRSxvQkFBb0I7WUFDOUIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDO1NBQzlELENBQUM7SUFDSixDQUFDOztpSEFqQlUsb0JBQW9CO2tIQUFwQixvQkFBb0IsaUJBSGhCLGNBQWMsYUFDbkIsY0FBYztrSEFFYixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFKaEMsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxjQUFjLENBQUM7b0JBQzlCLE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztpQkFDMUI7OzBCQUVjLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgT3B0aW9uYWwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQm9vdHN0cmFwSWNvbnMgfSBmcm9tIFwiLi9uZy1ib290c3RyYXAtaWNvbnMuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBJY29ucyB9IGZyb20gXCIuL2ljb25zLnByb3ZpZGVyXCI7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW0Jvb3RzdHJhcEljb25zXSxcbiAgZXhwb3J0czogW0Jvb3RzdHJhcEljb25zXSxcbn0pXG5leHBvcnQgY2xhc3MgQm9vdHN0cmFwSWNvbnNNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGljb25zOiBJY29ucykge1xuICAgIGlmICghdGhpcy5pY29ucykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgTm8gaWNvbiBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIHVzZSAnQm9vdHN0cmFwSWNvbnNNb2R1bGUucGljayh7IC4uLiB9KScgd2hlbiBpbXBvcnRpbmcgdGhlIG1vZHVsZVxcbmAgK1xuICAgICAgICAgIGBSZWZlciB0byBkb2N1bWVudGF0aW9uIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXV0YXMvbmctYm9vdHN0cmFwLWljb25zL2lzc3Vlc2BcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHBpY2soaWNvbnM6IHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gIH0pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEJvb3RzdHJhcEljb25zTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBCb290c3RyYXBJY29uc01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogSWNvbnMsIG11bHRpOiB0cnVlLCB1c2VWYWx1ZTogaWNvbnMgfV0sXG4gICAgfTtcbiAgfVxufVxuIl19